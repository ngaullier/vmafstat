#!/usr/bin/env bash
# "shellcheck -ax" pass

set -o errexit
set -o pipefail
set -o nounset

_scriptdir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

VERSION="1.0.0.0"

# pushd required for shellcheck workaround
pushd "$_scriptdir" >/dev/null
. ./ffsync_cmd.sh
. ./ffsync_helpers.sh
. ./ffsync_log.sh
popd >/dev/null

# parse args
get_opts "$@"
if [[ -z $file_ref || -z $file_main ]]; then
    usage
fi

# global settings
INI__ffmpeg_binary='ffmpeg'
INI__ffprobe_binary='ffprobe'
INI__ff_global=( '-hide_banner' '-probesize' '10000000' )

# check deps
! which jq >/dev/null && echo "Please install jq" && exit 1
! which "$INI__ffprobe_binary" >/dev/null && echo "ffprobe: '$INI__ffprobe_binary' not found" && exit 1
! which "$INI__ffmpeg_binary" >/dev/null && echo "ffmpeg: '$INI__ffmpeg_binary' not found" && exit 1

# make temp dir
tmp_dir="$(mktemp_auto)"
mktemp_trap "$tmp_dir"

# probe inputs
 json_ref="$tmp_dir/ref.json"
json_main="$tmp_dir/main.json"
ffprobe2json    "$file_ref"     "$json_ref"
ffprobe2json    "$file_main"    "$json_main"
 fps_ref=$(jq -r '.streams[] | select(.codec_type == "video" ).avg_frame_rate' "$json_ref")
fps_main=$(jq -r '.streams[] | select(.codec_type == "video" ).avg_frame_rate' "$json_main")
log 2 "fps_ref=$fps_ref, fps_main=$fps_main"

# ---------------------------------------------------------
# Main loop
# ____________________________________
seek_counter=3
while true; do
    start_ref_base=$(jq -n "${start_ref_base_s}*(${fps_ref})|round")
    start_main_base=$(jq -n "${start_main_base_s}*(${fps_main})|round")
    max_offset=$(jq -n "${max_offset_s}*(${fps_main})|round")
    [[ $start_main_base -lt $max_offset ]] && max_neg_offset=$start_main_base || max_neg_offset=$max_offset
    shift_ref_best=0
    shift_main_best=0
    psnr_diff_best=0
    psnr_best=0
    for (( shift_ref=start_ref_base; shift_ref<=start_ref_base+(start_ref_base>start_main_base); shift_ref++ ))
    do
        log 1 "Seek ref @${shift_ref} frames"
        this_shift_ref_best=0
        this_shift_main_best=0
        this_psnr_best=0
        this_psnr_min=999999999
        for (( shift_main=start_main_base-max_neg_offset; shift_main<=start_main_base+max_offset; shift_main++ ))
        do
            cmd_analysis=("$INI__ffmpeg_binary" "${INI__ff_global[@]}" '-y' \
                '-i' "${file_main}" '-i' "${file_ref}" '-shortest' '-map' 'v' '-lavfi' \
                "[0:v]trim=start_frame=${shift_main}:duration=${seg_duration_s},settb=AVTB,setpts=PTS-STARTPTS[main];
                 [1:v]trim=start_frame=${shift_ref}:duration=${seg_duration_s},settb=AVTB,setpts=PTS-STARTPTS[ref];
                 [main][ref]psnr"
                 '-f' 'null' '-')
            log 2 "  $(printf "%q " "${cmd_analysis[@]}")"
            psnr=$("${cmd_analysis[@]}" 2>&1|grep psnr|awk -v 'RS=:' '/average/{getline; print $1}')
            log 1 "$((shift_main-start_main_base)): $psnr"
            psnr_int=$(jq -n '100*'"$psnr"'|floor')
            if [[ ${psnr_int} -gt ${this_psnr_best} ]]
            then
                this_shift_ref_best=${shift_ref}
                this_shift_main_best=${shift_main}
                this_psnr_best=${psnr_int}
            fi
            [[ ${psnr_int} -lt ${this_psnr_min} ]] && this_psnr_min=${psnr_int}
        done
        this_psnr_diff=$((this_psnr_best - this_psnr_min))
        if [[ ${this_psnr_diff} -gt ${psnr_diff_best} ]]
        then
            shift_ref_best=${this_shift_ref_best}
            shift_main_best=${this_shift_main_best}
            psnr_best=${this_psnr_best}
            psnr_diff_best=${this_psnr_diff}
        fi
    done
    [[ ${psnr_diff_best} -ge ${min_psnr_diff} ]] && break
    log 0 "Sync @${start_ref_base_s}s/${start_main_base_s}s failed: not enough psnr variance to assume successfull sync (${psnr_diff_best} < ${min_psnr_diff})"
    [[ $seek_counter -le 1 ]] && exit_fail "Did not find a seek point with enough psnr variance"
    seek_counter=$((seek_counter-1))
    start_ref_base_s=$(jq -n "${start_ref_base_s}+${retry_start_shift_s}")
    start_main_base_s=$(jq -n "${start_main_base_s}+${retry_start_shift_s}")
done

# ---------------------------------------------------------
# Report
# ____________________________________
log 0 "Synced: offset=$(jq -n "${shift_main_best}-${shift_ref_best}/(${fps_ref})*(${fps_main})|round"), psnr_diff=$(jq -n "$psnr_diff_best"'/100'), psnr_max=$(jq -n "$psnr_best"'/100')"

echo "$shift_ref_best"
echo "$shift_main_best"
echo "$psnr_diff_best"
echo "$psnr_best"
